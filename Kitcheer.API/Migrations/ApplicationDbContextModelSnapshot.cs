// <auto-generated />
using System;
using Kitcheer.API.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

#nullable disable

namespace Kitcheer.API.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.Entity("Kitcheer.API.Models.ProductMovement", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("DeleteFl")
                        .HasColumnType("boolean");

                    b.Property<int?>("FromStorageLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("MovementData")
                        .HasColumnType("jsonb");

                    b.Property<string>("MovementType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("RekordChange")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("StoredProductId")
                        .HasColumnType("integer");

                    b.Property<int?>("ToStorageLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("FromStorageLocationId");

                    b.HasIndex("StoredProductId");

                    b.HasIndex("ToStorageLocationId");

                    b.ToTable("ProductMovements");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ProductTemplate", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Barcode")
                        .HasMaxLength(50)
                        .HasColumnType("character varying(50)");

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("DefaultUnit")
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.Property<bool>("DeleteFl")
                        .HasColumnType("boolean");

                    b.Property<decimal>("MinimumQuantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<string>("ProductData")
                        .HasColumnType("jsonb");

                    b.Property<string>("ProductType")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<string>("RekordChange")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.HasIndex("Brand", "Name")
                        .IsUnique()
                        .HasFilter("\"DeleteFl\" = false");

                    b.ToTable("ProductTemplates");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ShoppingList", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("DeleteFl")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsActive")
                        .HasColumnType("boolean");

                    b.Property<string>("ListData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RekordChange")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.HasKey("Id");

                    b.ToTable("ShoppingLists");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ShoppingListItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("Brand")
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<bool>("DeleteFl")
                        .HasColumnType("boolean");

                    b.Property<bool>("IsPurchased")
                        .HasColumnType("boolean");

                    b.Property<string>("ItemData")
                        .HasColumnType("jsonb");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("character varying(200)");

                    b.Property<int?>("ProductTemplateId")
                        .HasColumnType("integer");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("RekordChange")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("ShoppingListId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("ProductTemplateId");

                    b.HasIndex("ShoppingListId", "ProductTemplateId")
                        .HasFilter("\"DeleteFl\" = false");

                    b.ToTable("ShoppingListItems");
                });

            modelBuilder.Entity("Kitcheer.API.Models.StorageLocation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<string>("AdditionalData")
                        .HasColumnType("jsonb");

                    b.Property<bool>("DeleteFl")
                        .HasColumnType("boolean");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("character varying(100)");

                    b.Property<string>("RekordChange")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("StorageLocations");
                });

            modelBuilder.Entity("Kitcheer.API.Models.StoredProduct", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer");

                    NpgsqlPropertyBuilderExtensions.UseIdentityByDefaultColumn(b.Property<int>("Id"));

                    b.Property<bool>("DeleteFl")
                        .HasColumnType("boolean");

                    b.Property<DateTime?>("ExpiryDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<string>("ProductDetails")
                        .HasColumnType("jsonb");

                    b.Property<int>("ProductTemplateId")
                        .HasColumnType("integer");

                    b.Property<DateTime?>("PurchaseDate")
                        .HasColumnType("timestamp with time zone");

                    b.Property<decimal>("Quantity")
                        .HasColumnType("decimal(10,3)");

                    b.Property<string>("RekordChange")
                        .IsRequired()
                        .HasColumnType("jsonb");

                    b.Property<int>("StorageLocationId")
                        .HasColumnType("integer");

                    b.Property<string>("Unit")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("character varying(20)");

                    b.HasKey("Id");

                    b.HasIndex("StorageLocationId");

                    b.HasIndex("ProductTemplateId", "StorageLocationId", "ExpiryDate")
                        .HasFilter("\"DeleteFl\" = false");

                    b.ToTable("StoredProducts");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ProductMovement", b =>
                {
                    b.HasOne("Kitcheer.API.Models.StorageLocation", "FromStorageLocation")
                        .WithMany()
                        .HasForeignKey("FromStorageLocationId");

                    b.HasOne("Kitcheer.API.Models.StoredProduct", "StoredProduct")
                        .WithMany("ProductMovements")
                        .HasForeignKey("StoredProductId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kitcheer.API.Models.StorageLocation", "ToStorageLocation")
                        .WithMany()
                        .HasForeignKey("ToStorageLocationId");

                    b.Navigation("FromStorageLocation");

                    b.Navigation("StoredProduct");

                    b.Navigation("ToStorageLocation");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ShoppingListItem", b =>
                {
                    b.HasOne("Kitcheer.API.Models.ProductTemplate", "ProductTemplate")
                        .WithMany("ShoppingListItems")
                        .HasForeignKey("ProductTemplateId");

                    b.HasOne("Kitcheer.API.Models.ShoppingList", "ShoppingList")
                        .WithMany("Items")
                        .HasForeignKey("ShoppingListId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductTemplate");

                    b.Navigation("ShoppingList");
                });

            modelBuilder.Entity("Kitcheer.API.Models.StoredProduct", b =>
                {
                    b.HasOne("Kitcheer.API.Models.ProductTemplate", "ProductTemplate")
                        .WithMany("StoredProducts")
                        .HasForeignKey("ProductTemplateId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Kitcheer.API.Models.StorageLocation", "StorageLocation")
                        .WithMany("StoredProducts")
                        .HasForeignKey("StorageLocationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ProductTemplate");

                    b.Navigation("StorageLocation");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ProductTemplate", b =>
                {
                    b.Navigation("ShoppingListItems");

                    b.Navigation("StoredProducts");
                });

            modelBuilder.Entity("Kitcheer.API.Models.ShoppingList", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("Kitcheer.API.Models.StorageLocation", b =>
                {
                    b.Navigation("StoredProducts");
                });

            modelBuilder.Entity("Kitcheer.API.Models.StoredProduct", b =>
                {
                    b.Navigation("ProductMovements");
                });
#pragma warning restore 612, 618
        }
    }
}
